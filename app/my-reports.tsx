import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, SafeAreaView, ScrollView, ActivityIndicator, Linking } from 'react-native';
import { getUser } from '@/lib/auth';
import { getPrescriptionsForPatient, getReportsForPatient } from '@/lib/api';
import { Prescription, Report, User } from '@/lib/schema';
import { doctors } from '@/lib/data';

const MyReportsScreen = () => {
  const [loggedInUser, setLoggedInUser] = useState<User | null>(null);
  const [prescriptions, setPrescriptions] = useState<Prescription[]>([]);
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      const user = await getUser();
      setLoggedInUser(user);

      if (user && user.role === 'patient') {
        const patientPrescriptions = await getPrescriptionsForPatient(user.id);
        setPrescriptions(patientPrescriptions);

        const patientReports = await getReportsForPatient(user.id);
        setReports(patientReports);
      }
      setLoading(false);
    };
    fetchData();
  }, []);

  const getDoctorName = (doctorId: string) => {
    const doctor = doctors.find(doc => doc.id === doctorId);
    return doctor ? doctor.name : 'Unknown Doctor';
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.safeArea}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#3B82F6" />
          <Text style={styles.loadingText}>Loading reports and prescriptions...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView contentContainerStyle={styles.container}>
        <Text style={styles.headerTitle}>My Health Records</Text>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Prescriptions ({prescriptions.length})</Text>
          {prescriptions.length > 0 ? (
            prescriptions.map((item) => (
              <View key={item.id} style={styles.itemContainer}>
                <Text style={styles.itemTitle}>{item.medication}</Text>
                <Text style={styles.itemText}>Dosage: {item.dosage}</Text>
                <Text style={styles.itemText}>Instructions: {item.instructions}</Text>
                <Text style={styles.itemText}>Prescribed by: Dr. {getDoctorName(item.doctorId)}</Text>
                <Text style={styles.itemText}>Date: {item.datePrescribed}</Text>
              </View>
            ))
          ) : (
            <Text style={styles.noRecordsText}>No prescriptions found.</Text>
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Reports ({reports.length})</Text>
          {reports.length > 0 ? (
            reports.map((item) => (
              <View key={item.id} style={styles.itemContainer}>
                <Text style={styles.itemTitle}>{item.type}</Text>
                <Text style={styles.itemText}>Details: {item.details}</Text>
                <Text style={styles.itemText}>Generated by: Dr. {getDoctorName(item.doctorId)}</Text>
                <Text style={styles.itemText}>Date: {item.dateGenerated}</Text>
                {item.fileUrl && (
                  <TouchableOpacity onPress={() => Linking.openURL(item.fileUrl)}>
                    <Text style={styles.fileLink}>View Report File</Text>
                  </TouchableOpacity>
                )}
              </View>
            ))
          ) : (
            <Text style={styles.noRecordsText}>No reports found.</Text>
          )}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F0F4F8',
  },
  container: {
    flexGrow: 1,
    padding: 20,
  },
  headerTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1E293B',
    marginBottom: 20,
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#64748B',
  },
  section: {
    marginBottom: 30,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 15,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1E293B',
    marginBottom: 15,
  },
  itemContainer: {
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
    marginBottom: 10,
  },
  itemTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#334155',
  },
  itemText: {
    fontSize: 14,
    color: '#64748B',
    marginTop: 2,
  },
  fileLink: {
    fontSize: 14,
    color: '#3B82F6',
    marginTop: 5,
    textDecorationLine: 'underline',
  },
  noRecordsText: {
    fontSize: 16,
    color: '#64748B',
    textAlign: 'center',
    paddingVertical: 10,
  },
});

export default MyReportsScreen;
